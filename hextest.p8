pico-8 cartridge // http://www.pico-8.com
version 35
__lua__
function _init()
	poke(0x5f2d, 1)
	log("kurwa",true)
	debug={}
	tile_tex={1,3,5,7}
	--map_tiles=split("1001001110111100111000111","")
	map_tiles=split("000022210001132000001311101122220000211401312210000321111113123011011111112111002211111111211100121111132111200013121111111310002223111112133000111211111112100011111314221100002242200003300000","")

	hexes={}
	cam_x,cam_y=0,0
	mx,my=0,0

	--hex array in axial coordinates
	local map_i=1
	for q=0,11 do
		for r=0,15 do
			if(map_tiles[map_i]!=0)add(hexes,{q=q,r=r-flr(q/2)-q%2,s=map_tiles[map_i]})
			map_i+=1
		end
	end
	debug[1]=#hexes
	debug[2]=map_tiles[1]
end

function get_hexsel()
	--finds hex closest to mouse
	local mindist,minp,d,p=32767
	for h in all(hexes) do
		p=h2p(h)
		--bit shift to prevent dist overflow
		d=dist(cmx>>5,cmy>>5,p.x>>5,p.y>>5)
		--prevent hex selection on edge
		d=d<0.034 and d or 32767
		if d<mindist then
			mindist,minp=d,p
		end
	end
	return minp
end

function _update60()
	--move camera with arrows
 if btn(➡️) then
 	cam_x+=1
 end
 if btn(⬅️) then
 	cam_x-=1
 end
 if btn(⬆️) then
 	cam_y-=1
 end
 if btn(⬇️) then
 	cam_y+=1
 end

 mx,my=stat(32),stat(33)
 cmx,cmy=cam_x+mx,cam_y+my
end

function _draw()
	--clear screen
	cls(12)

	--draw hex grid
	camera(cam_x,cam_y)
	for h in all(hexes) do
		local p=h2p(h)
 	spr(tile_tex[h.s],p.x-7,p.y-7,2,2)
  --pset(p.x,p.y,8) --mark center
		--print(h.q,p.x-3,p.y-2,2)
		--print(h.r,p.x+3,p.y-2,1)
	end


	--draw selected hex
	hexsel=get_hexsel()
 if(hexsel)spr(33+flr(sin(t()*2)+1)*2,hexsel.x-7,hexsel.y-7,2,2)

	camera()

	--draw mouse
	spr(15,mx,my)
	--debug
	do_debug()
end
-->8
function log(t,over)
	printh(t,"log",over or false)
end

function do_debug()

	draw_debug()
end

function draw_debug()
	local y=8
	for txt in all(debug) do
		print(txt,5,y,8)
		y+=6
	end
end

function dist(fx,fy,tx,ty)
	--pythagorean distance between two points
	return (fx-tx)^2+(fy-ty)^2
end

function round(val)
	return flr(val+.5)
end

function h2p(hex)
	--returns center pixel of hex
	local x = hex.q*12
	local y = hex.r*14+hex.q*7
	return {x=x,y=y}
end
__gfx__
00000000000ffffffffff000000ffffffffff000000111111111100000022222222220000000000000000000000000000000000000000000af00000001000000
00000000000fbbbbbbbbf000000fbbbbbbbbf000000133333333100000023333333320000000000000000000000000000000000000000000f800000017100000
0070070000fbbbbbbbbbbf0000fbbbbbbbbbbf000013333333333100002333333333320000000000000000000000000000000000000000000080000017710000
0007700000fbbbbbbbbbbf0000fbb333333bbf000013336666333100002333666633320000000000000000000000000000000000000000000008000017771000
000770000fbbbbbbbbbbbbf00fbb33333333bbf00133336666333310023333666633332000000000000000000000000000000000000000000000000017777100
007007000fbbbbbbbbbbbbf00fbb33333333bbf00133336666333310023333666633332000000000000000000000000000000000000000000000000017711000
00000000fbbbbbbbbbbbbbbffbb3333333333bbf1333336666333331233333666633333200000000000000000000000000000000000000000000000001171000
00000000fbbbbbbbbbbbbbbffbb3333333333bbf1333333333333331233333333333333200000000000000000000000000000000000000000000000000000000
00000000fbbbbbbbbbbbbbbffbb3333333333bbf1333333333333331233333333333333200000000000000000000000000000000000000000000000000000000
000000000fbbbbbbbbbbbbf00fbb33333333bbf00133333333333310023333333333332000000000000000000000000000000000000000000000000000000000
000000000fbbbbbbbbbbbbf00fbb33333333bbf00133333333333310023333333333332000000000000000000000000000000000000000000000000000000000
0000000000fbbbbbbbbbbf0000fbb333333bbf000013333333333100002333333333320000000000000000000000000000000000000000000000000000000000
0000000000fbbbbbbbbbbf0000fbbbbbbbbbbf000013333333333100002333333333320000000000000000000000000000000000000000000000000000000000
00000000000fbbbbbbbbf000000fbbbbbbbbf0000001333333331000000233333333200000000000000000000000000000000000000000000000000000000000
00000000000ffffffffff000000ffffffffff0000001111111111000000222222222200000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000880088000000008800880088000000000000000000000000000000000000000000000000000000000000000000000000000a003333333333000
000000000008000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038b8b8b8b3000
0000000000800000000008000080000000000800000000000000000000000000000000000000000000000000000000000000000000000000a03ab8b8b8b8a300
0000000000000000000000000080000000000800000000000000000000000000000000000000000000000000000000000000000000000000003a8b8b8b8ba300
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a3bab8b8b8b8a830
0000000008000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038a8b8b8b8bab30
0000000080000000000000088000000000000008000000000000000000000000000000000000000000000000000000000000000000000000a8bab8b8b8b8a8b3
00000000000000000000000080000000000000080000000000000000000000000000000000000000000000000000000000000000000000002b2a2b228b8bab83
000000008000000000000008800000000000000800000000000000000000000000000000000000000000000000000000000000000000000038bab8b8b8b8a8b3
0000000008000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038a8b8b8b8bab30
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003bab8b8b8b8a830
0000000000000000000000000080000000000800000000000000000000000000000000000000000000000000000000000000000000000000003a8b8b8b8ba300
0000000000800000000008000080000000000800000000000000000000000000000000000000000000000000000000000000000000000000003ab8b8b8b8a300
000000000008000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038b8b8b8b3000
00000000000008800880000000088008800880000000000000000000000000000000000000000000000000000000000000000000000000000003333333333000
